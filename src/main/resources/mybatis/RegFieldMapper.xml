<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.peacock.shop.web.mapper.RegFieldMapper" >
  <resultMap id="BaseResultMap" type="com.peacock.shop.web.domain.RegField" >
    <constructor >
      <idArg column="id" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="reg_field_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="dis_order" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="display" jdbcType="BIT" javaType="java.lang.Boolean" />
      <arg column="type" jdbcType="BIT" javaType="java.lang.Boolean" />
      <arg column="is_need" jdbcType="BIT" javaType="java.lang.Boolean" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, reg_field_name, dis_order, display, type, is_need
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.peacock.shop.web.domain.RegFieldExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from reg_fields
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Byte" >
    select 
    <include refid="Base_Column_List" />
    from reg_fields
    where id = #{id,jdbcType=TINYINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Byte" >
    delete from reg_fields
    where id = #{id,jdbcType=TINYINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.peacock.shop.web.domain.RegFieldExample" >
    delete from reg_fields
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.peacock.shop.web.domain.RegField" >
    insert into reg_fields (id, reg_field_name, dis_order, 
      display, type, is_need)
    values (#{id,jdbcType=TINYINT}, #{regFieldName,jdbcType=VARCHAR}, #{disOrder,jdbcType=TINYINT}, 
      #{display,jdbcType=BIT}, #{type,jdbcType=BIT}, #{isNeed,jdbcType=BIT})
  </insert>
  <insert id="insertSelective" parameterType="com.peacock.shop.web.domain.RegField" >
    insert into reg_fields
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="regFieldName != null" >
        reg_field_name,
      </if>
      <if test="disOrder != null" >
        dis_order,
      </if>
      <if test="display != null" >
        display,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="isNeed != null" >
        is_need,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=TINYINT},
      </if>
      <if test="regFieldName != null" >
        #{regFieldName,jdbcType=VARCHAR},
      </if>
      <if test="disOrder != null" >
        #{disOrder,jdbcType=TINYINT},
      </if>
      <if test="display != null" >
        #{display,jdbcType=BIT},
      </if>
      <if test="type != null" >
        #{type,jdbcType=BIT},
      </if>
      <if test="isNeed != null" >
        #{isNeed,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.peacock.shop.web.domain.RegFieldExample" resultType="java.lang.Integer" >
    select count(*) from reg_fields
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update reg_fields
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=TINYINT},
      </if>
      <if test="record.regFieldName != null" >
        reg_field_name = #{record.regFieldName,jdbcType=VARCHAR},
      </if>
      <if test="record.disOrder != null" >
        dis_order = #{record.disOrder,jdbcType=TINYINT},
      </if>
      <if test="record.display != null" >
        display = #{record.display,jdbcType=BIT},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=BIT},
      </if>
      <if test="record.isNeed != null" >
        is_need = #{record.isNeed,jdbcType=BIT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update reg_fields
    set id = #{record.id,jdbcType=TINYINT},
      reg_field_name = #{record.regFieldName,jdbcType=VARCHAR},
      dis_order = #{record.disOrder,jdbcType=TINYINT},
      display = #{record.display,jdbcType=BIT},
      type = #{record.type,jdbcType=BIT},
      is_need = #{record.isNeed,jdbcType=BIT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.peacock.shop.web.domain.RegField" >
    update reg_fields
    <set >
      <if test="regFieldName != null" >
        reg_field_name = #{regFieldName,jdbcType=VARCHAR},
      </if>
      <if test="disOrder != null" >
        dis_order = #{disOrder,jdbcType=TINYINT},
      </if>
      <if test="display != null" >
        display = #{display,jdbcType=BIT},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=BIT},
      </if>
      <if test="isNeed != null" >
        is_need = #{isNeed,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=TINYINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.peacock.shop.web.domain.RegField" >
    update reg_fields
    set reg_field_name = #{regFieldName,jdbcType=VARCHAR},
      dis_order = #{disOrder,jdbcType=TINYINT},
      display = #{display,jdbcType=BIT},
      type = #{type,jdbcType=BIT},
      is_need = #{isNeed,jdbcType=BIT}
    where id = #{id,jdbcType=TINYINT}
  </update>
</mapper>