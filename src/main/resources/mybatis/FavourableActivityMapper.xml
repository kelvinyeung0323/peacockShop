<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.peacock.shop.web.mapper.FavourableActivityMapper" >
  <resultMap id="BaseResultMap" type="com.peacock.shop.web.domain.FavourableActivity" >
    <constructor >
      <idArg column="act_id" jdbcType="SMALLINT" javaType="java.lang.Short" />
      <arg column="act_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="start_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="end_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_rank" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="act_range" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="act_range_ext" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="min_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="max_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="act_type" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="act_type_ext" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="sort_order" jdbcType="TINYINT" javaType="java.lang.Byte" />
    </constructor>
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.peacock.shop.web.domain.FavourableActivity" >
    <constructor >
      <idArg column="act_id" jdbcType="SMALLINT" javaType="java.lang.Short" />
      <arg column="act_name" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="start_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="end_time" jdbcType="INTEGER" javaType="java.lang.Integer" />
      <arg column="user_rank" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="act_range" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="act_range_ext" jdbcType="VARCHAR" javaType="java.lang.String" />
      <arg column="min_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="max_amount" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="act_type" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="act_type_ext" jdbcType="DECIMAL" javaType="java.math.BigDecimal" />
      <arg column="sort_order" jdbcType="TINYINT" javaType="java.lang.Byte" />
      <arg column="gift" jdbcType="LONGVARCHAR" javaType="java.lang.String" />
    </constructor>
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    act_id, act_name, start_time, end_time, user_rank, act_range, act_range_ext, min_amount, 
    max_amount, act_type, act_type_ext, sort_order
  </sql>
  <sql id="Blob_Column_List" >
    gift
  </sql>
  <select id="selectByExampleWithBLOBs" resultMap="ResultMapWithBLOBs" parameterType="com.peacock.shop.web.domain.FavourableActivityExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from favourable_activity
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.peacock.shop.web.domain.FavourableActivityExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from favourable_activity
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Short" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from favourable_activity
    where act_id = #{actId,jdbcType=SMALLINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Short" >
    delete from favourable_activity
    where act_id = #{actId,jdbcType=SMALLINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.peacock.shop.web.domain.FavourableActivityExample" >
    delete from favourable_activity
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.peacock.shop.web.domain.FavourableActivity" >
    insert into favourable_activity (act_id, act_name, start_time, 
      end_time, user_rank, act_range, 
      act_range_ext, min_amount, max_amount, 
      act_type, act_type_ext, sort_order, 
      gift)
    values (#{actId,jdbcType=SMALLINT}, #{actName,jdbcType=VARCHAR}, #{startTime,jdbcType=INTEGER}, 
      #{endTime,jdbcType=INTEGER}, #{userRank,jdbcType=VARCHAR}, #{actRange,jdbcType=TINYINT}, 
      #{actRangeExt,jdbcType=VARCHAR}, #{minAmount,jdbcType=DECIMAL}, #{maxAmount,jdbcType=DECIMAL}, 
      #{actType,jdbcType=TINYINT}, #{actTypeExt,jdbcType=DECIMAL}, #{sortOrder,jdbcType=TINYINT}, 
      #{gift,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.peacock.shop.web.domain.FavourableActivity" >
    insert into favourable_activity
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="actId != null" >
        act_id,
      </if>
      <if test="actName != null" >
        act_name,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="userRank != null" >
        user_rank,
      </if>
      <if test="actRange != null" >
        act_range,
      </if>
      <if test="actRangeExt != null" >
        act_range_ext,
      </if>
      <if test="minAmount != null" >
        min_amount,
      </if>
      <if test="maxAmount != null" >
        max_amount,
      </if>
      <if test="actType != null" >
        act_type,
      </if>
      <if test="actTypeExt != null" >
        act_type_ext,
      </if>
      <if test="sortOrder != null" >
        sort_order,
      </if>
      <if test="gift != null" >
        gift,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="actId != null" >
        #{actId,jdbcType=SMALLINT},
      </if>
      <if test="actName != null" >
        #{actName,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=INTEGER},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=INTEGER},
      </if>
      <if test="userRank != null" >
        #{userRank,jdbcType=VARCHAR},
      </if>
      <if test="actRange != null" >
        #{actRange,jdbcType=TINYINT},
      </if>
      <if test="actRangeExt != null" >
        #{actRangeExt,jdbcType=VARCHAR},
      </if>
      <if test="minAmount != null" >
        #{minAmount,jdbcType=DECIMAL},
      </if>
      <if test="maxAmount != null" >
        #{maxAmount,jdbcType=DECIMAL},
      </if>
      <if test="actType != null" >
        #{actType,jdbcType=TINYINT},
      </if>
      <if test="actTypeExt != null" >
        #{actTypeExt,jdbcType=DECIMAL},
      </if>
      <if test="sortOrder != null" >
        #{sortOrder,jdbcType=TINYINT},
      </if>
      <if test="gift != null" >
        #{gift,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.peacock.shop.web.domain.FavourableActivityExample" resultType="java.lang.Integer" >
    select count(*) from favourable_activity
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update favourable_activity
    <set >
      <if test="record.actId != null" >
        act_id = #{record.actId,jdbcType=SMALLINT},
      </if>
      <if test="record.actName != null" >
        act_name = #{record.actName,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=INTEGER},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=INTEGER},
      </if>
      <if test="record.userRank != null" >
        user_rank = #{record.userRank,jdbcType=VARCHAR},
      </if>
      <if test="record.actRange != null" >
        act_range = #{record.actRange,jdbcType=TINYINT},
      </if>
      <if test="record.actRangeExt != null" >
        act_range_ext = #{record.actRangeExt,jdbcType=VARCHAR},
      </if>
      <if test="record.minAmount != null" >
        min_amount = #{record.minAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.maxAmount != null" >
        max_amount = #{record.maxAmount,jdbcType=DECIMAL},
      </if>
      <if test="record.actType != null" >
        act_type = #{record.actType,jdbcType=TINYINT},
      </if>
      <if test="record.actTypeExt != null" >
        act_type_ext = #{record.actTypeExt,jdbcType=DECIMAL},
      </if>
      <if test="record.sortOrder != null" >
        sort_order = #{record.sortOrder,jdbcType=TINYINT},
      </if>
      <if test="record.gift != null" >
        gift = #{record.gift,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map" >
    update favourable_activity
    set act_id = #{record.actId,jdbcType=SMALLINT},
      act_name = #{record.actName,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=INTEGER},
      end_time = #{record.endTime,jdbcType=INTEGER},
      user_rank = #{record.userRank,jdbcType=VARCHAR},
      act_range = #{record.actRange,jdbcType=TINYINT},
      act_range_ext = #{record.actRangeExt,jdbcType=VARCHAR},
      min_amount = #{record.minAmount,jdbcType=DECIMAL},
      max_amount = #{record.maxAmount,jdbcType=DECIMAL},
      act_type = #{record.actType,jdbcType=TINYINT},
      act_type_ext = #{record.actTypeExt,jdbcType=DECIMAL},
      sort_order = #{record.sortOrder,jdbcType=TINYINT},
      gift = #{record.gift,jdbcType=LONGVARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update favourable_activity
    set act_id = #{record.actId,jdbcType=SMALLINT},
      act_name = #{record.actName,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=INTEGER},
      end_time = #{record.endTime,jdbcType=INTEGER},
      user_rank = #{record.userRank,jdbcType=VARCHAR},
      act_range = #{record.actRange,jdbcType=TINYINT},
      act_range_ext = #{record.actRangeExt,jdbcType=VARCHAR},
      min_amount = #{record.minAmount,jdbcType=DECIMAL},
      max_amount = #{record.maxAmount,jdbcType=DECIMAL},
      act_type = #{record.actType,jdbcType=TINYINT},
      act_type_ext = #{record.actTypeExt,jdbcType=DECIMAL},
      sort_order = #{record.sortOrder,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.peacock.shop.web.domain.FavourableActivity" >
    update favourable_activity
    <set >
      <if test="actName != null" >
        act_name = #{actName,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=INTEGER},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=INTEGER},
      </if>
      <if test="userRank != null" >
        user_rank = #{userRank,jdbcType=VARCHAR},
      </if>
      <if test="actRange != null" >
        act_range = #{actRange,jdbcType=TINYINT},
      </if>
      <if test="actRangeExt != null" >
        act_range_ext = #{actRangeExt,jdbcType=VARCHAR},
      </if>
      <if test="minAmount != null" >
        min_amount = #{minAmount,jdbcType=DECIMAL},
      </if>
      <if test="maxAmount != null" >
        max_amount = #{maxAmount,jdbcType=DECIMAL},
      </if>
      <if test="actType != null" >
        act_type = #{actType,jdbcType=TINYINT},
      </if>
      <if test="actTypeExt != null" >
        act_type_ext = #{actTypeExt,jdbcType=DECIMAL},
      </if>
      <if test="sortOrder != null" >
        sort_order = #{sortOrder,jdbcType=TINYINT},
      </if>
      <if test="gift != null" >
        gift = #{gift,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where act_id = #{actId,jdbcType=SMALLINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.peacock.shop.web.domain.FavourableActivity" >
    update favourable_activity
    set act_name = #{actName,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=INTEGER},
      end_time = #{endTime,jdbcType=INTEGER},
      user_rank = #{userRank,jdbcType=VARCHAR},
      act_range = #{actRange,jdbcType=TINYINT},
      act_range_ext = #{actRangeExt,jdbcType=VARCHAR},
      min_amount = #{minAmount,jdbcType=DECIMAL},
      max_amount = #{maxAmount,jdbcType=DECIMAL},
      act_type = #{actType,jdbcType=TINYINT},
      act_type_ext = #{actTypeExt,jdbcType=DECIMAL},
      sort_order = #{sortOrder,jdbcType=TINYINT},
      gift = #{gift,jdbcType=LONGVARCHAR}
    where act_id = #{actId,jdbcType=SMALLINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.peacock.shop.web.domain.FavourableActivity" >
    update favourable_activity
    set act_name = #{actName,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=INTEGER},
      end_time = #{endTime,jdbcType=INTEGER},
      user_rank = #{userRank,jdbcType=VARCHAR},
      act_range = #{actRange,jdbcType=TINYINT},
      act_range_ext = #{actRangeExt,jdbcType=VARCHAR},
      min_amount = #{minAmount,jdbcType=DECIMAL},
      max_amount = #{maxAmount,jdbcType=DECIMAL},
      act_type = #{actType,jdbcType=TINYINT},
      act_type_ext = #{actTypeExt,jdbcType=DECIMAL},
      sort_order = #{sortOrder,jdbcType=TINYINT}
    where act_id = #{actId,jdbcType=SMALLINT}
  </update>
</mapper>